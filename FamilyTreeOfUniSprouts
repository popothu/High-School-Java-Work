/**
 * FamilyTreeOfUniSprouts_CLIENT:
 */

import java.util.*;
import java.util.Scanner;

public class FamilyTreeOfUniSprouts_CLIENT
{
static FamilyTreeOfUniSprouts_Node root;
static String names[][] = {{"Jones","ROOT-Node"},
    {"Bill","Jones"},  {"Katy","Jones"}, {"Mike","Jones"}, {"Tom","Jones"},
    {"Dave1","Bill"},  {"Mary","Bill"}, {"Leo","Katy"}, {"Betty","Mike"}, 
    {"Roger","Mike"}, {"Larry","Mary"}, {"Paul","Mary"}, {"Penny","Mary"},
    {"Don","Betty"}, {"Petter","Paul"}, {"Dave2","Don"}
 };    
 

    // ====================================================================
    // =========================== MAIN ==================================== 
    // ====================================================================
    public static void main()
    {
    int  playAgain;
    String name, namesList= "\n"; 
    Scanner sc = new Scanner(System.in);
        
        // Build the Family of UniSprouts Tree       
        buildFamilyTreeOfUniSprouts();
        
        do {
            
            // Gather names
            for (int r=0; r<names.length; r++) {
                namesList += "   " + names[r][0] + "     \t" + names[r][1] + "\n";                
            }
            
            // Output namesList         
            System.out.println(" nameList: \n  Child\tParent" + namesList);
          
            printFamilyTreeOfUniSprouts(root);            
            
            // Input name + print all relatives
            System.out.print("\n\n Enter a name from which to get GrandParent/Parent/Siblings/Cousins/Children/GrandChildren: ");
            name = sc.next();
            printRelatives(name);
                                   
            // Play Again?
            System.out.print("\n\n Play Again? (1==yes, 2==no): ");
            playAgain = sc.nextInt();            
            
        } while (playAgain == 1);

        
    } // main  

    // ==================== buildFamilyTreeOfUniSprouts ====================== 
    public static void buildFamilyTreeOfUniSprouts()
    {      
            root=new FamilyTreeOfUniSprouts_Node(names[0][0],0,null);
            for (int i=1; i<names.length; i++) {
                FamilyTreeOfUniSprouts_Node parent=findPerson(names[i][1]);
                FamilyTreeOfUniSprouts_Node child=child=new FamilyTreeOfUniSprouts_Node(names[i][0],parent.getGenerationLevel()+1,null);
                placeNodeInFamilyTreeOfUniSprouts(parent,child);
            }
    }  // buildFamilyTreeOfUniSprouts()
    
    // ============== placeNodeInFamilyTreeOfUniSprouts  ================= 
    public static void placeNodeInFamilyTreeOfUniSprouts(FamilyTreeOfUniSprouts_Node   
                                                                            parent, FamilyTreeOfUniSprouts_Node child)
    {    
           if (parent.getChildren()==null) {
               parent.setChildren(child);
               child.setPrevious(parent);
            } else {
                FamilyTreeOfUniSprouts_Node current=parent.getChildren();
                while (current.getNext()!=null) {
                    current=current.getNext();
                }
                current.setNext(child);
                child.setPrevious(current);
            }
    } // placeNodeInFamilyTreeOfUniSprouts()
    
    // ==================== printFamilyTreeOfUniSprouts  ======================== 
    public static void printFamilyTreeOfUniSprouts(FamilyTreeOfUniSprouts_Node current)
    {  
            while (current!=null) {
                for (int i=1; i<=current.getGenerationLevel(); i++) {
                    System.out.print("\t");
                }
                System.out.println(current.getName());
                if (current.getChildren()!=null) {
                    printFamilyTreeOfUniSprouts(current.getChildren());
                }
                current=current.getNext();
            }
    }  // printFamilyTreeOfUniSprouts()
    
    // ========================= printRelatives =============================== 
    public static void printRelatives(String name)
    {    
        FamilyTreeOfUniSprouts_Node current;
        if (findPerson(name).getGenerationLevel()!=0) { //has parent
            FamilyTreeOfUniSprouts_Node parent=findParent(findPerson(name));
            System.out.println("Parent: "+parent.getName());
            if (findPerson(name).getGenerationLevel()!=1) { //has grandparent
                FamilyTreeOfUniSprouts_Node grandparent=findParent(parent);
                System.out.println("Grandparent: "+grandparent.getName());
            }
            //get cousins
            current=getToBeginningOfGeneration(parent);
            String cousins="";
            while (current!=null) {
                if (!current.getName().equals(parent.getName())) {
                    cousins+=getAllChildren(current);
                }
                current=current.getNext();
            }
            System.out.println("Cousins: "+cousins);
        }
        //get siblings, neices, and nephew
        current=getToBeginningOfGeneration(findPerson(name));
        String nn="", siblings="";
        while (current!=null) {
            if (!current.getName().equals(name)) {
                siblings+=current.getName()+" ";
                nn+=getAllChildren(current);
            }
            current=current.getNext();
        }
        System.out.println("Siblings: "+siblings+"\nNieces and Nephews: "+nn);
        //get children and grandchildren
        String children="", grandchildren="";
        current=findPerson(name).getChildren();
        while (current!=null) {
            children+=current.getName()+" ";
            grandchildren+=getAllChildren(current);
            current=current.getNext();
        }
        System.out.println("Children: "+children+"\nGrandchildren: "+grandchildren);
    }  // printRelatives()
    private static FamilyTreeOfUniSprouts_Node getToBeginningOfGeneration(FamilyTreeOfUniSprouts_Node current) {
        if (current.getPrevious()!=null) {
            while (current.getPrevious().getGenerationLevel()==current.getGenerationLevel()) {
                current=current.getPrevious();
            }
        }
        return current;
    }
    
    public static FamilyTreeOfUniSprouts_Node findPerson(String name) {
        return findPerson(root,name);
    }
    //recursion
    private static FamilyTreeOfUniSprouts_Node findPerson(FamilyTreeOfUniSprouts_Node n, String name) {
        if (n==null || n.getName().equals(name)) {
            return n;
        } else {
            if (findPerson(n.getChildren(),name)==null) {
                return findPerson(n.getNext(),name);
            } else {
                return findPerson(n.getChildren(),name);
            }
        }
    }
    public static FamilyTreeOfUniSprouts_Node findParent(FamilyTreeOfUniSprouts_Node person) {
        FamilyTreeOfUniSprouts_Node current=person;
        while (current!=null && current.getGenerationLevel()==person.getGenerationLevel()) {
            current=current.getPrevious();
        }
        return current;
    }
    public static String getAllChildren(FamilyTreeOfUniSprouts_Node parent) {
        FamilyTreeOfUniSprouts_Node current=parent.getChildren();
        String children="";
        while (current!=null) {
            children+=current.getName()+" ";
            current=current.getNext();
        }
        return children;
    }
}  // FamilyTreeOfUniSprouts_CLIENT

FamilyTreeOfUniSprouts_Node

public class FamilyTreeOfUniSprouts_Node
{
private int generationLevel;
private String name;
private FamilyTreeOfUniSprouts_Node previous, next, children;

    public FamilyTreeOfUniSprouts_Node()
    {
        generationLevel=-1;
        name="";
        previous = next = children = null;
    }
    public FamilyTreeOfUniSprouts_Node(String n,int gl,
                               FamilyTreeOfUniSprouts_Node p)
    {
        name = n;
        generationLevel= gl;
        previous = p;
        children = null;
        next = null;
    }
    // ================== Accessor Methods ================== 
    public int getGenerationLevel()
    {
        return generationLevel;        
    }
    public String getName()
    {
        return name;
    }
    public FamilyTreeOfUniSprouts_Node getNext()
    {
        return next;
    }
    public FamilyTreeOfUniSprouts_Node getPrevious()
    {
        return previous;
    }
    public FamilyTreeOfUniSprouts_Node getChildren()
    {
        return children;
    }
    // ================== Mutator Methods ==================   
    public void setChildren(FamilyTreeOfUniSprouts_Node child)
    {
        children = child;
    }
    public void setNext(FamilyTreeOfUniSprouts_Node n)
    {
        next = n;
    }
    public void setPrevious(FamilyTreeOfUniSprouts_Node n) { //I added this
        previous = n;
    }
    
}  // FamilyTreeOfUniSprouts_Node
