
import javax.swing.JOptionPane;
import java.util.ArrayList;
import java.util.List;

public class Polygon_Comparable_CLIENT
{
    // **************************************************************************************************
    // ***************************************** init() (MAIN) ******************************************
    // **************************************************************************************************    
    public static void main()
    {
        // Declare + define ArrayList 'polygonShapesList' of type Polygon_Comparable
        ArrayList<Polygon_Comparable> polygonShapesList = new ArrayList<>();
        String polygonShapesListItems="";
        int mainMenuSelection;

        do { 

            polygonShapesListItems="";
            for (int i = 0; i<polygonShapesList.size(); i++)
                polygonShapesListItems += "(" + i + ") " + polygonShapesList.get(i) + "\n";

            mainMenuSelection = Integer.parseInt( JOptionPane.showInputDialog(" Enter your menu selection: \n " +
                    polygonShapesListItems + "\n\n\n" +
                    "(0) Quit. \n" +
                    "(1) Add a new Polygon at the end of the list. \n" +
                    "(2) Add a new Polygon at an index 'i' in the list. \n" +
                    "(3) Remove a Polygon at an index 'i' in the list. \n" +
                    "(4) Set a new Polygon to an index 'i' in the list. \n" +
                    "(5) Get a Polygon at an index 'i' in the list and find the Area of it. \n" +
                    "(6) Find the Polygon with the largest area. \n" +
                    "(7) Find the Polygon with the smallest area.\n"));

            switch (mainMenuSelection) {
                case 0 : JOptionPane.showMessageDialog(null,"Good Bye!");  System.exit(0); break;
                case 1 : addPolygonToEndOfList(polygonShapesList); break;
                case 2 : addPolygonAtAnIndex(polygonShapesList); break;            
                case 3 : removePolygonAtAnIndex(polygonShapesList); break;
                case 4 : setPolygonAtAnIndex(polygonShapesList); break;            
                case 5 : getAndFindAreaOfPolygonAtAnIndex(polygonShapesList); break;
                case 6 : findPolygonWithLargestArea(polygonShapesList); break;
                case 7 : findPolygonWithSmallestArea(polygonShapesList); break;
                default:
                JOptionPane.showMessageDialog(null," Thanks for playing PolygonShapesList game! \n Have a good Day!!");
                System.exit(0);
                break;       
            }

        } while (1==1);
    }

    // **************************************************************************************************
    // ******************************** addPolygon section ********************************************    
    // **************************************************************************************************    
    public static void addPolygonToEndOfList(ArrayList<Polygon_Comparable> pList)
    {
        int polygonSelection;
        boolean badSelection;
        int pListEndPosition;

        pListEndPosition = ( (pList.size() == 0) ? 0 : pList.size());

        do {
            polygonSelection = Integer.parseInt (JOptionPane.showInputDialog(" Enter your menu selection from these categories: \n " +
                    "(1) Triangle  (2) Quadralateral  (3) Agon  (4) Rounds \n") ); //Polygon.showCategories()); 
            badSelection=false;
            switch (polygonSelection) {
                case 1 : addTriangleAtAnIndex(pList,pListEndPosition);  break;
                case 2 : addQuadrilateralAtAnIndex(pList,pListEndPosition);  break;
                case 3 : addAgonAtAnIndex(pList,pListEndPosition);  break;
                case 4 : addRoundAtAnIndex(pList,pListEndPosition);  break;                                    
                default: 
                JOptionPane.showMessageDialog(null," ERROR! \n Please choose only from the listed categories");
                badSelection = true;
                break;
            }

        } while (badSelection == true);

    }    
    // ***********************************************************************************************
    public static void addPolygonAtAnIndex(List<Polygon_Comparable> pList)
    {
        int polygonSelection;
        boolean badSelection;
        int indexSelection;

        do {
            indexSelection = Integer.parseInt(JOptionPane.showInputDialog("Enter an index number 0 - " + (pList.size()-1)));
            if ( !( 0 <= indexSelection && indexSelection <= pList.size()-1))
                JOptionPane.showMessageDialog(null,"Enter ONLY numbers 0 - " + (pList.size()-1),"Warning",JOptionPane.PLAIN_MESSAGE);  // "Enter ONLY numbers 0 - " + pList.size()-1, "Warning!!",JOptionPane.WARNING_MESSAGE);
        } while (! (0 <= indexSelection && indexSelection <= pList.size()-1) );

        do {
            polygonSelection = Integer.parseInt (JOptionPane.showInputDialog(" Enter your menu selection from these categories: \n " +
                    "(1) Triangle  (2) Quadralateral  (3) Agon  (4) Rounds \n") ); //Polygon.showCategories()); 
            badSelection=false;
            switch (polygonSelection) {
                case 1 : addTriangleAtAnIndex(pList,indexSelection);  break;
                case 2 : addQuadrilateralAtAnIndex(pList,indexSelection);  break;
                case 3 : addAgonAtAnIndex(pList,indexSelection);  break;
                case 4 : addRoundAtAnIndex(pList,indexSelection);  break;                                    
                default: 
                JOptionPane.showMessageDialog(null," ERROR! \n Please choose only from the listed categories");
                badSelection = true;
                break;
            }

        } while (badSelection == true);          

    }
    // --------------------------------------------------------------------------------------------
    public static void addTriangleAtAnIndex(List pList,int index)
    {
        int choice;
        double b, h;

        choice = Integer.parseInt( JOptionPane.showInputDialog(null, "Please select a Triangle from the following list: \n"
                + " (1) Scalene  (2) Isosceles  (3) Equilateral ") );  //   + Triangles.typesAvailable()) );  
        b = Double.parseDouble( JOptionPane.showInputDialog(null, "Please type in the base of the Triangle: \n") );    
        h = Double.parseDouble( JOptionPane.showInputDialog(null, "Please type in the height of the Triangle: \n") );          

        switch (choice) {
            case 1:  pList.add(index,new Scalene(b,h)); break;
            case 2:  pList.add(index,new Isosceles(b,h)); break;
            case 3:  pList.add(index,new Equilateral(b,h)); break;            
        }
    }
    // --------------------------------------------------------------------------------------------
    public static void addQuadrilateralAtAnIndex(List pList,int index)
    {
        int choice;
        double b1,b2,h;

        choice = Integer.parseInt( JOptionPane.showInputDialog(null, "Please select a Quadrilateral from the following list: \n"
                + " (1) Trapezium (2) Trapezoid (3) Parallelogram  (4) Rhombus (5) Rectangle (6) Square   ") );

        b1 = Double.parseDouble( JOptionPane.showInputDialog(null," Enter the base: \n") );        
        h = Double.parseDouble( JOptionPane.showInputDialog(null," Enter the height: \n") );        
        switch (choice) {
            case 1: b2 = Double.parseDouble( JOptionPane.showInputDialog(null," Enter 2nd base: \n") );
            pList.add(index,new Trapezium(b1,b2,h)); break;
            case 2: b2 = Double.parseDouble( JOptionPane.showInputDialog(null," Enter 2nd base: \n") );
            pList.add(index,new Trapezoid(b1,b2,h)); break;
            case 3:  pList.add(index,new Parallelogram(b1,h)); break;
            case 4:  pList.add(index,new Rhombus(b1,h)); break;
            case 5: pList.add(index,new Rectangle(b1,h)); break;
            case 6: pList.add(index,new Square(b1)); break;               
        }            

    }    
    // --------------------------------------------------------------------------------------------    
    public static void addAgonAtAnIndex(List pList,int index)
    {
        int choice;
        double side;

        choice = Integer.parseInt( JOptionPane.showInputDialog(null, "Please select a Agon from the following list: \n"
                + " (1)Pentagon (2) Hexagon (3) Heptagon (4) Octagon (5) Nonagon (6) Decagon (7) Dodecagon \n") );
        side = Double.parseDouble( JOptionPane.showInputDialog(null, "Please enter the length of the side: \n" ) );
        switch (choice) {
            case 1: pList.add(index,new Pentagon(side)); break;
            case 2: pList.add(index,new Hexagon(side)); break;
            case 3: pList.add(index,new Heptagon(side)); break;             
            case 4: pList.add(index,new Octagon(side)); break;  
            case 5: pList.add(index,new Nonagon(side)); break;
            case 6: pList.add(index,new Decagon(side)); break;
            case 7: pList.add(index,new Dodecagon(side)); break;           
        }            

    }    
    // --------------------------------------------------------------------------------------------    
    public static void addRoundAtAnIndex(List pList,int index)
    {
        int choice;
        double radius1, radius2;

        choice = Integer.parseInt( JOptionPane.showInputDialog(null, "Please select a Round from the following list: \n"
                + " (1) Circle  \n (2) SemiCircle  \n (3) Ellipse + \n  ") );
        radius1 = Double.parseDouble( JOptionPane.showInputDialog(null, "Please enter the length of the radius: \n" ) );

        switch (choice) {
            case 1: pList.add(index,new Circle(radius1)); break;
            case 2: pList.add(index,new SemiCircle(radius1)); break;
            case 3: radius2 = Double.parseDouble( JOptionPane.showInputDialog(null, "Please enter the length of the radius2: \n" ) );
            pList.add(index,new Ellipse(radius1,radius2));
            break;
        }            

    }    

    // **************************************************************************************************    
    // *************************** removePolygon section ********************************************     
    // **************************************************************************************************
    public static void removePolygonAtAnIndex(ArrayList pList)
    {
        int i;
        String output="";
        int indexSelection;

        for (i=0; i<pList.size(); i++)
            output += "(" + i +") " + (Polygon_Comparable)pList.get(i) +"\n";

        do {
            indexSelection = Integer.parseInt( JOptionPane.showInputDialog("Please enter a selection for Deletion from the list: \n" + output));
            if ( !( 0 <= indexSelection && indexSelection <= pList.size()-1))
                JOptionPane.showMessageDialog(null,"Enter ONLY numbers 0 - " + (pList.size()-1),"Warning",JOptionPane.PLAIN_MESSAGE);  // "Enter ONLY numbers 0 - " + pList.size()-1, "Warning!!",JOptionPane.WARNING_MESSAGE);
        } while ( !(0 <= indexSelection && indexSelection <= pList.size()-1));

        // delete selected
        pList.remove(indexSelection);

        output="";
        for (i=0; i<pList.size(); i++)
            output += "(" + i +") " + (Polygon_Comparable)pList.get(i) +"\n";
        JOptionPane.showMessageDialog(null," Remove is successful.  The new list is: \n" + output);

    }

    // **************************************************************************************************    
    // ************************************* setPolygonAtAnIndex ******************************************
    // **************************************************************************************************
    public static void setPolygonAtAnIndex(List pList)
    {
        int polygonSelection;
        boolean badSelection;
        int indexSelection;

        do {
            indexSelection = Integer.parseInt(JOptionPane.showInputDialog("Enter an index number 0 - " + (pList.size()-1)));
            if ( !( 0 <= indexSelection && indexSelection <= pList.size()-1))
                JOptionPane.showMessageDialog(null, "Enter ONLY numbers 0 - " + (pList.size()-1), "Warning!!",JOptionPane.WARNING_MESSAGE);
        } while ( !( 0 <= indexSelection && indexSelection <= pList.size()-1));

        do {
            polygonSelection = Integer.parseInt (JOptionPane.showInputDialog(" Enter your menu selection from these categories: \n " +
                    "(1) Triangle  (2) Quadralateral  (3) Agon  (4) Rounds \n") ); //Polygon.showCategories()); 
            badSelection=false;
            switch (polygonSelection) {
                case 1 : setTriangleAtAnIndex(pList,indexSelection);  break;
                case 2 : setQuadrilateralAtAnIndex(pList,indexSelection);  break;
                case 3 : setAgonAtAnIndex(pList,indexSelection);  break;
                case 4 : setRoundAtAnIndex(pList,indexSelection);  break;                                    
                default: 
                JOptionPane.showMessageDialog(null," ERROR! \n Please choose only from the listed categories");
                badSelection = true;
                break;
            }

        } while (badSelection == true);

    }
    // --------------------------------------------------------------------------------------------
    public static void setTriangleAtAnIndex(List pList,int index)
    {
        int choice;
        double b, h;

        choice = Integer.parseInt( JOptionPane.showInputDialog(null, "Please select a Triangle from the following list: \n"
                + " (1) Scalene  (2) Isoscelese  (3) Equilateral ") );  //   + Triangles.typesAvailable()) );  
        b = Double.parseDouble( JOptionPane.showInputDialog(null, "Please type in the base of the Triangle: \n") );    
        h = Double.parseDouble( JOptionPane.showInputDialog(null, "Please type in the height of the Triangle: \n") );          

        switch (choice) {
            case 1:  pList.set(index, new Scalene(b,h)); break;
            case 2:  pList.set(index, new Isosceles(b,h)); break;
            case 3:  pList.set(index, new Equilateral(b,h)); break;             
        }
    }
    // --------------------------------------------------------------------------------------------
    public static void setQuadrilateralAtAnIndex(List pList,int index)
    {
        int choice;
        double b1,b2,h;

        choice = Integer.parseInt( JOptionPane.showInputDialog(null, "Please select a Quadrilateral from the following list: \n"
                + " (1) Trapezium (2) Trapezoid (3) Parallelogram  (4) Rhombus (5) Rectangle (6) Square   ") );

        b1 = Double.parseDouble( JOptionPane.showInputDialog(null," Enter the base: \n") );        
        h = Double.parseDouble( JOptionPane.showInputDialog(null," Enter the height: \n") );        
        switch (choice) {
            case 1: b2 = Double.parseDouble( JOptionPane.showInputDialog(null," Enter 2nd base: \n") );
            pList.set(index,new Trapezium(b1,b2,h)); break;
            case 2: b2 = Double.parseDouble( JOptionPane.showInputDialog(null," Enter 2nd base: \n") );
            pList.set(index,new Trapezoid(b1,b2,h)); break;
            case 3:  pList.set(index,new Parallelogram(b1,h)); break;
            case 4:  pList.set(index,new Rhombus(b1,h)); break;
            case 5: pList.set(index,new Rectangle(b1,h)); break;
            case 6: pList.set(index,new Square(b1)); break;               
        }            

    }    
    // --------------------------------------------------------------------------------------------    
    public static void setAgonAtAnIndex(List pList,int index)
    {
        int choice;
        double side;

        choice = Integer.parseInt( JOptionPane.showInputDialog(null, "Please select a Agon from the following list: \n"
                + " (1)Pentagon (2) Hexagon (3) Heptagon (4) Octagon (5) Nonagon (6) Decagon (7) Dodecagon \n") );
        side = Double.parseDouble( JOptionPane.showInputDialog(null, "Please enter the length of the side: \n" ) );
        switch (choice) {
            case 1: pList.set(index,new Pentagon(side)); break;
            case 2: pList.set(index,new Hexagon(side)); break;
            case 3: pList.set(index,new Heptagon(side)); break;             
            case 4: pList.set(index,new Octagon(side)); break;  
            case 5: pList.set(index,new Nonagon(side)); break;
            case 6: pList.set(index,new Decagon(side)); break;
            case 7: pList.set(index,new Dodecagon(side)); break;           
        }            

    }    
    // --------------------------------------------------------------------------------------------    
    public static void setRoundAtAnIndex(List pList,int index)
    {
        int choice;
        double radius1, radius2;

        choice = Integer.parseInt( JOptionPane.showInputDialog(null, "Please select a Round from the following list: \n"
                + " (1) Circle  \n (2) SemiCircle  \n (3) Ellipse  \n  ") );
        radius1 = Double.parseDouble( JOptionPane.showInputDialog(null, "Please enter the length of the radius: \n" ) );

        switch (choice) {
            case 1: pList.set(index,new Circle(radius1)); break;
            case 2: pList.set(index,new SemiCircle(radius1)); break;
            case 3: radius2 = Double.parseDouble( JOptionPane.showInputDialog(null, "Please enter the length of the radius2: \n" ) );
            pList.set(index,new Ellipse(radius1,radius2));
            break;
        }            

    }        

    // **************************************************************************************************
    // *************************** findAreaOfPolygon section ******************************************** 
    // **************************************************************************************************
    public static void getAndFindAreaOfPolygonAtAnIndex(ArrayList<Polygon_Comparable> pList)
    {
        int i;
        String output="";
        int areaSelection;
        Polygon_Comparable p;

        for (i=0; i<pList.size(); i++)
            output += "(" + i +") " + (Polygon_Comparable) pList.get(i) +"\n";

        areaSelection = Integer.parseInt( JOptionPane.showInputDialog("Please enter a selection for Area from the list: \n" + output));

        // get Polygon and find area
        p = pList.get(areaSelection);           
        JOptionPane.showMessageDialog(null, "Area of the " + p.getMyType() + " " + p.getMyCategory() + " = " + p.getMyArea());

    }    

    // **************************************************************************************************
    // ******************** find Largest/Smallest Area Of Polygon section ******************************* 
    // **************************************************************************************************
    public static void findPolygonWithLargestArea(ArrayList<Polygon_Comparable> pList)
    {
        Polygon_Comparable largestArea = pList.get(0);
        for (int i=1; i<pList.size(); i++) {
            if (pList.get(i).compareTo(largestArea)>0) {
                largestArea=pList.get(i);
            }

        }
        JOptionPane.showMessageDialog(null,"Largest area = "+largestArea);
    }

    public static void findPolygonWithSmallestArea(ArrayList<Polygon_Comparable> pList)
    {
        Polygon_Comparable smallestArea = pList.get(0);
        for (int i=1; i<pList.size(); i++) {
            if (pList.get(i).compareTo(smallestArea)<0) {
                smallestArea=pList.get(i);
            }
        }
        JOptionPane.showMessageDialog(null,"Smallest area = "+smallestArea);
    }    
} // CLIENT
========================================================================
/**
 * 
 * Polygon is the base class for Chap_9_ShapesPolygon_Interface_ArrayList project.
 * 
 * (1) Write the Polygon_Comparable interface that has 4 abstract methods in it. 
 *     calculateArea() - used for calculating the area.  (returns void)
 *     getMyArea() - used to get the area.  (returns a double)
 *     getMyType() - used to get the type of Shape int the subclasses(returns String)
 *                      Ex. Isocelese, Square, Hexagon, Circle, etc
 *     getMyCategory() - used to get the category of whatever shape. (returns String)
 *                        Ex. Triangles, Quadrilaterals, Agon, Rounds
 *     
 *     (2) This Interface will "extend Comparable" as one Interface "extend" 's another
 *         and does NOT "implement" another. You will have to override 'compareTo()' in
 *         your subclasses.
 *      Note: compareTo() - used to compare to Shapes area.  (returns an int / takes in an Object)
 *     
 */

public interface Polygon_Comparable extends Comparable
{
    public void calculateArea();
    
    public double getMyArea();
    
    public String getMyType();
    
    public String getMyCategory();
}
// COMPARABLE
========================================================================
// Class heading   
public abstract class Agon implements Polygon_Comparable
{
    private double mySideLength;
    private double myArea;
    private int MY_NUM_SIDES;

    // *********** Constructors ****************
    public Agon() {
        this(0,0);
    }

    public Agon(int sides, double length) {
        MY_NUM_SIDES=sides;
        setMySideLength(length);
        calculateArea();
    }

    // ************ abstract method(s) & the overiding of such ************
    public String getMyCategory() {
        return "Agon";
    }

    // ********************* Assessor and Mutator methods *************************
    public double getMyArea()
    {
        calculateArea();  // Always calculateArea() first.
        return myArea;
    }

    public double getMyNumSides()
    {
        return MY_NUM_SIDES;
    }

    public double getMySideLength()
    {
        return mySideLength;
    }

    public void setMySideLength(double s)
    {
        mySideLength = s;
    }

    public void calculateArea()
    {
        myArea = 1.0/4 * MY_NUM_SIDES * Math.pow(mySideLength,2) * (1.0/ Math.tan(Math.PI / MY_NUM_SIDES));
    }

    // ************************* compareTo() *************************************
    public int compareTo(Object o) {
        if (!(o instanceof Polygon_Comparable)) {
            throw new IllegalArgumentException();
        }
        Polygon_Comparable other = (Polygon_Comparable) o;
        if (getMyArea()- other.getMyArea()<0) {
            return -1;
        } else if (getMyArea()-other.getMyArea()>0){
            return 1;
        } else {
            return 0;
        }
    }

    // ************************** toString() ******************************
    public String toString() 
    { 
        return "Agon and I am also a Polygon_Comparable";
    }
}
// AGON
========================================================================
public class Hexagon extends Agon
{
    public Hexagon() {
        super();
    }
    public Hexagon(double sideLength) {
        super(6,sideLength);
    }
      
    public String getMyType() {
        return "Hexagon";
    }
          
    public String toString()
    {
        return "Hexagon and I am also a " + super.toString() + " AND my area = " + getMyArea();
    }
}
public class Decagon extends Agon
{
    public Decagon() {
        super();
    }
    public Decagon(double sideLength) {
        super(10,sideLength);
    }
      
    public String getMyType() {
        return "Decagon";
    }
          
    public String toString()
    {
        return "Decagon and I am also a " + super.toString() + " AND my area = " + getMyArea();
    }
}
public class Octagon extends Agon
{
    public Octagon() {
        super();
    }
    public Octagon(double sideLength) {
        super(8,sideLength);
    }
      
    public String getMyType() {
        return "Octagon";
    }
          
    public String toString()
    {
        return "Octagon and I am also a " + super.toString() + " AND my area = " + getMyArea();
    }
}

public class Pentagon extends Agon
{
    public Pentagon() {
        super();
    }
    public Pentagon(double sideLength) {
        super(5,sideLength);
    }
      
    public String getMyType() {
        return "Pentagon";
    }
          
    public String toString()
    {
        return "Pentagon and I am also a " + super.toString() + " AND my area = " + getMyArea();
    }
}
public class Dodecagon extends Agon
{
    public Dodecagon() {
        super();
    }
    public Dodecagon(double sideLength) {
        super(12,sideLength);
    }
      
    public String getMyType() {
        return "Dodecagon";
    }
          
    public String toString()
    {
        return "Dodecagon and I am also a " + super.toString() + " AND my area = " + getMyArea();
    }
}
public class Nonagon extends Agon
{
    public Nonagon() {
        super();
    }
    public Nonagon(double sideLength) {
        super(9,sideLength);
    }
      
    public String getMyType() {
        return "Nonagon";
    }
          
    public String toString()
    {
        return "Nonagon and I am also a " + super.toString() + " AND my area = " + getMyArea();
    }
}
public class Heptagon extends Agon
{
    public Heptagon() {
        super();
    }
    public Heptagon(double sideLength) {
        super(7,sideLength);
    }
      
    public String getMyType() {
        return "Heptagon";
    }
          
    public String toString()
    {
        return "Heptagon and I am also a " + super.toString() + " AND my area = " + getMyArea();
    }
}
public abstract class Rounds implements Polygon_Comparable
    {
    // Instance variables
    private double myRadius;
    private double myArea;
    
       // *********** Constructors ****************
        public Rounds() {
            this(0);
        }
        
        public Rounds(double radius) {
            setMyRadius(radius);
            calculateArea();
        }
       
       
        // ************ abstract getMyCategory() and getMyType() methods overidem *************
        public String getMyCategory() {
            return "Rounds";
        }
    
        // ********************* Assessor and Mutator methods *************************
        public void setMyRadius(double r)
        {
            myRadius = r;
        }
        public void setMyArea(double a)
        {
            myArea = a;    
        }
        public double getMyRadius()
        {
            return myRadius;
        }
        public double getMyArea()
        {
            calculateArea();  // Always calculateArea() first.
            return myArea;
        }    
        
        // ******* abstract method calculateArea() to be overriden
        public abstract void calculateArea(); //calls setMyArea
        
        // ************************* compareTo() *************************************
        public int compareTo(Object o) {
        if (!(o instanceof Polygon_Comparable)) {
            throw new IllegalArgumentException();
        }
        Polygon_Comparable other = (Polygon_Comparable) o;
        if (getMyArea()-other.getMyArea()<0) {
            return -1;
        } else if (getMyArea()-other.getMyArea()>0){
            return 1;
        } else {
            return 0;
        }
    }
        
        // ************************** toString() ******************************
        public String toString() 
        { 
            return "Round and I am also a Polygon_Comparable";
        }    
    
    }
ROUNDS
public class Circle extends Rounds
{
    public Circle() {
        super();
    }
    public Circle(double radius) {
        super(radius);
    }
      
    public String getMyType() {
        return "Circle";
    }
          
    public String toString()
    {
        return "Circle and I am also a " + super.toString() + " AND my area = " + getMyArea();
    }
    
    public void calculateArea() {
        setMyArea(Math.PI*getMyRadius()*getMyRadius());
    }
}
public class Ellipse extends Rounds
{
    private double myRadius2;
    
    public Ellipse() {
        this(0,0);
    }
    public Ellipse(double radius1, double radius2) {
        super(radius1);
        myRadius2=radius2;
    }
      
    public String getMyType() {
        return "Ellipse";
    }
          
    public String toString()
    {
        return "Ellipse and I am also a " + super.toString() + " AND my area = " + getMyArea();
    }
    
    public void calculateArea() {
        setMyArea(Math.PI*getMyRadius()*myRadius2);
    }
}
public class SemiCircle extends Rounds
{
    public SemiCircle() {
        super();
    }
    public SemiCircle(double radius) {
        super(radius);
    }
      
    public String getMyType() {
        return "SemiCircle";
    }
          
    public String toString()
    {
        return "SemiCircle and I am also a " + super.toString() + " AND my area = " + getMyArea();
    }
    
    public void calculateArea() {
        setMyArea((Math.PI*getMyRadius()*getMyRadius())/2);
    }
}
public abstract class Quadrilaterals implements Polygon_Comparable
{
    private double myBase1;
    private double myBase2;
    private double myHeight;
    private double myArea;
    // ---------------------- constructor ---------------------
    public Quadrilaterals() {
        this(0,0,0);
    }
    
    public Quadrilaterals(double base1, double base2, double height) {
        setMyBase1(base1);
        setMyBase2(base2);
        setMyHeight(height);
        setMyArea(getMyArea());
    }

    // ************ abstract method(s) & the overiding of such *************
    public String getMyCategory() {
        return "Quadrilaterals";
    }
    
    // ********************* Assessor and Mutator methods *************************
    public void setMyBase1(double b1)
    {
         myBase1 = b1;
    }
    public void setMyBase2(double b2)
    {
         myBase2 = b2;
    }    
    public void setMyHeight(double h)
    {
       myHeight = h; 
    }
    public void setMyArea(double a)
    {
        myArea = a;
    }
    
    public double getMyBase1()
    {
        return myBase1;
    }
    public double getMyBase2()
    {
        return myBase2;
    }
    public double getMyHeight()
    {
        return myHeight;
    }    
    public double getMyArea()
    {
        calculateArea();  // Always calculateArea() first.
        return myArea;
    }
    
    // ******* abstract method calculateArea() to be overriden written here:
    public abstract void calculateArea();  
    
             
    // ************************* compareTo() *************************************
    public int compareTo(Object o) {
        if (!(o instanceof Polygon_Comparable)) {
            throw new IllegalArgumentException();
        }
        Polygon_Comparable other = (Polygon_Comparable) o;
        if (getMyArea()-other.getMyArea()<0) {
            return -1;
        } else if (getMyArea()-other.getMyArea()>0){
            return 1;
        } else {
            return 0;
        }
    }
            
    // ************************** toString() ******************************
    public String toString() 
    { 
        return "Quadrilateral and I am also a Polygon_Comparable";
    }      
    
}
QUAD

public class Trapezoid extends Quadrilaterals
{
    public Trapezoid() {
        super();
    }
    
    public Trapezoid(double base1, double base2, double height) {
        super(base1,base2,height);
    }
    
    public String getMyType() {
        return "Trapezoid";
    }
    
    public String toString() {
        return "Trapezoid and I am also a " + super.toString() + " AND my area = " + getMyArea();
    }
    
    public void calculateArea() {
        setMyArea(((getMyBase1()+getMyBase2())/2)*getMyHeight());
    }
}
public class Trapezium extends Quadrilaterals
{
    public Trapezium() {
        super();
    }
    
    public Trapezium(double base1, double base2, double height) {
        super(base1,base2,height);
    }
    
    public String getMyType() {
        return "Trapezium";
    }
    
    public String toString() {
        return "Trapezium and I am also a " + super.toString() + " AND my area = " + getMyArea();
    }
    
    public void calculateArea() {
        setMyArea(((getMyBase1()+getMyBase2())/2)*getMyHeight());
    }
}
public class Parallelogram extends Trapezoid
{
    public Parallelogram() {
        super();
    }

    public Parallelogram(double base1, double height) {
        super(base1,base1,height);
    }

    public String getMyType() {
        return "Parallelogram";
    }

    public String toString() {
        return "Parallelogram and I am also a " + super.toString() + " AND my area = " + getMyArea();
    }

    public void calculateArea() {
        setMyArea(getMyBase1() * getMyHeight());
    }
}
public class Rectangle extends Parallelogram
{
    public Rectangle() {
        super();
    }

    public Rectangle(double base1, double height) {
        super(base1,height);
    }

    public String getMyType() {
        return "Rectangle";
    }

    public String toString() {
        return "Rectangle and I am also a " + super.toString() + " AND my area = " + getMyArea();
    }
}
public class Rhombus extends Parallelogram
{
    public Rhombus() {
        super();
    }

    public Rhombus(double base1, double height) {
        super(base1,height);
    }

    public String getMyType() {
        return "Rhombus";
    }

    public String toString() {
        return "Rhombus and I am also a " + super.toString() + " AND my area = " + getMyArea();
    }
}


public class Square extends Rectangle
{
    public Square() {
        super();
    }

    public Square(double base) {
        super(base,base);
    }

    public String getMyType() {
        return "Square";
    }

    public String toString() {
        return "Square and I am also a " + super.toString() + " AND my area = " + getMyArea();
    }
}

