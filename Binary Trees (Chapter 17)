#1
public int countLeftNodes(){
        return countLeftNodes(overallRoot);
    }

    private int countLeftNodes(IntTreeNode root){
        int count = countLeftNodes(root.right);
        if (root != null){
            count += 1 + countLeftNodes(root.left);

        }
        return count;
    }
#2
    public int countEmpty(){
        return countEmpty(overallRoot);
    }

    private int countEmpty(IntTreeNode root){
        if (root == null){ //if node is empty then count up, cases such as empty tree or reaching a leaf or an empty branch
            return 1;
        }
        return countEmpty(root.left) + countEmpty(root.right);
    }
#3
    public int depthSum() {
        return depthSum(overallRoot, 1);
    }

    private int depthSum(IntTreeNode node, int level) {
        if(node == null)
            return 0;

        return level * node.data +
        depthSum(node.left, level + 1) + depthSum(node.right, level + 1);
    }
#4
    public int countEvenBranches() {
        return countEvenBranches(overallRoot);
    }

    private int countEvenBranches(IntTreeNode node) {
        if(node == null){
            return 0;
        }
        int count = 0;

        if(node.data % 2 == 0 && (node.left != null || node.right != null)){
            count++;
        }

        return count + countEvenBranches(node.left) +
        countEvenBranches(node.right);
    }
#5
    public void printLevel(int n) {
        if(n < 1){
            throw new IllegalArgumentException();
        }

        printLevel(overallRoot, n);
    }

    private void printLevel(IntTreeNode node, int n) {
        if(node == null){
            return;
        }

        if(n == 1) {
            System.out.println(node.data);
            return;
        }

        printLevel(node.left, n - 1);
        printLevel(node.right, n - 1);
    }
#6
    public void printLeaves() {
        if(overallRoot == null)
            System.out.println("no leaves");
        else
            System.out.print("leaves: ");

        printLeaves(overallRoot);
    }

    private void printLeaves(IntTreeNode node) {
        if(node == null)
            return;

        if(node.left == null && node.right == null) {
            System.out.print(node.data + " ");
            return;
        }

        printLeaves(node.right);
        printLeaves(node.left);
    }
#7
    public boolean isFull() {
        return isFull(overallRoot);
    }

    private boolean isFull(IntTreeNode node) {
        if(node == null){
            return true;
        }
        if(node.left == null && node.right != null){
            return false;
        }

        if(node.left != null && node.right == null){
            return false;
        }
        return isFull(node.left) && isFull(node.right);
    }
#8
    public String toString() {
        return toString(overallRoot);
    }

    private String toString(IntTreeNode node) {
        if(node == null)
            return "empty";

        if(node.left == null && node.right == null)
            return String.valueOf(node.data);

        return "(" + node.data + ", " + toString(node.left) + ", " +
        toString(node.right) + ")";
    }
#9
    public boolean equals(IntTree t2) {
        return equals(overallRoot, t2.overallRoot);
    }

    private boolean equals(IntTreeNode n1, IntTreeNode n2) {
        if(n1 == null && n2 == null)
            return true;

        if(n1 == null && n2 != null)
            return false;

        if(n1 != null && n2 == null)
            return false;

        return n1.data == n2.data && equals(n1.left, n2.left) &&
        equals(n1.right, n2.right);
    }
#10
    public void doublePositives() {
        doublePositives(overallRoot);
    }

    private void doublePositives(IntTreeNode node) {
        if(node == null)
            return;

        if(node.data > 0)
            node.data *= 2;

        doublePositives(node.left);
        doublePositives(node.right);
    }
#11
    public int numberNodes() {
        return numberNodes(overallRoot, 1);
    }

    private int numberNodes(IntTreeNode node, int number) {
        if(node == null)
            return 0;

        node.data = number;
        int countLeft = numberNodes(node.left, number + 1);
        int countRight = numberNodes(node.right, number + countLeft + 1);

        return 1 + countLeft + countRight;
    }
Ex:12
private IntTreeNode removeLeaves(IntTreeNode node) {
        if(node == null)
            return null;

        if(node.left == null && node.right == null)
            return null;

        node.left = removeLeaves(node.left);
        node.right = removeLeaves(node.right);
        return node;
    }
Ex:17
private IntTreeNode evenLevels(IntTreeNode node, int level) {
        if(node == null)
            return null;

        if(node.left == null && node.right == null && level % 2 == 1)
            return null;

        node.left = evenLevels(node.left, level + 1);
        node.right = evenLevels(node.right, level + 1);
        return node;
    }
