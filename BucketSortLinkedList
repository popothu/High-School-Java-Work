CLIENT
import java.util.*;
public class BucketSortLL_CLIENT
{
    public static void main(String[] args) {
        Scanner console=new Scanner(System.in);
        LinkedIntList a=promptForNumbers(console);
        System.out.println("Old list: "+a);
        a.bucketSort();
        System.out.println("New list: "+a);
    }

    public static LinkedIntList promptForNumbers(Scanner console) {
        LinkedIntList a=new LinkedIntList();
        System.out.print("Number? ");
        int number=console.nextInt();
        while (number!=-1) {
            a.add(number);
            System.out.print("Number? ");
            number=console.nextInt();
        }
        return a;
    }
}

Methods in LL class

public void bucketSort() {
        ListNode[] buckets = new ListNode[10];   // To create the reference to the array.
        for (int i=0;  i < buckets.length;  i++) { // To fill the array with the ten base buckets.
             buckets[i] = new ListNode( );
        }
        int b=secondHighestNumDigits();
        for (int i=1; i<=b+1; i++) {
            for (int j=0; j<size(); j++) {
                int row=(get(j)%(int)Math.pow(10,i))/(int)Math.pow(10,i-1);
                ListNode current=buckets[row];
                while (current.next!=null) {
                    current=current.next;
                }
                current.next=new ListNode(get(j));
            }
            gather(buckets);
        }
    }
    private int secondHighestNumDigits() {
        int max=get(0), secondMax=get(0);
        for (int i=0; i<size(); i++) {
            if (get(i)>secondMax && get(i)<max) {
                secondMax=get(i);
            } else if (get(i)>max) {
                int temp=max;
                max=get(i);
                secondMax=temp;
            }
        }
        return ((int) Math.floor(Math.log10(secondMax))) +1;
    }
    
    private void gather(ListNode[] buckets) {
        front=null;
        for (int i=0; i<buckets.length; i++) {
            ListNode current=buckets[i];
            current=current.next;
            while (current!=null) {
                add(current.data);
                current=current.next;
            }
            buckets[i].next=null;
        }
    }
